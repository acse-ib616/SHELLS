% IÃ±igo Basterretxea Jacob 01246662

% Function with CST element stiffness formulation mathematically derived in
% Maple. k has been generated by Maple's CodeGenerator feature

% Inputs:
% - x1, x2, x3, y1, y2, y3: coordinates at the nodes n1, n2, n3
% - t: thickness of element
% - E: Young's Modulus
% - nu: Poisson ratio

% Output:
% - 6x6 CST element stiffness matrix
function k = k_mat_CST(x1,x2,x3,y1,y2,y3,nu,E,t)
k = [t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((y2 - y3) ^ 2 + (-x2 + x3) ^ 2 * (0.1e1 / 0.2e1 - nu / 0.2e1)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((y2 - y3) * nu * (-x2 + x3) + (-x2 + x3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (y2 - y3)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((y2 - y3) * (-y1 + y3) + (-x2 + x3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (x1 - x3)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((y2 - y3) * nu * (x1 - x3) + (-x2 + x3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (-y1 + y3)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((y2 - y3) * (y1 - y2) + (-x2 + x3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (-x1 + x2)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((y2 - y3) * nu * (-x1 + x2) + (-x2 + x3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (y1 - y2)); t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((y2 - y3) * nu * (-x2 + x3) + (-x2 + x3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (y2 - y3)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((-x2 + x3) ^ 2 + (y2 - y3) ^ 2 * (0.1e1 / 0.2e1 - nu / 0.2e1)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((-x2 + x3) * nu * (-y1 + y3) + (y2 - y3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (x1 - x3)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((-x2 + x3) * (x1 - x3) + (y2 - y3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (-y1 + y3)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((-x2 + x3) * nu * (y1 - y2) + (y2 - y3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (-x1 + x2)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((-x2 + x3) * (-x1 + x2) + (y2 - y3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (y1 - y2)); t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((y2 - y3) * (-y1 + y3) + (-x2 + x3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (x1 - x3)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((-x2 + x3) * nu * (-y1 + y3) + (y2 - y3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (x1 - x3)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((-y1 + y3) ^ 2 + (x1 - x3) ^ 2 * (0.1e1 / 0.2e1 - nu / 0.2e1)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((-y1 + y3) * nu * (x1 - x3) + (x1 - x3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (-y1 + y3)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((-y1 + y3) * (y1 - y2) + (x1 - x3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (-x1 + x2)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((-y1 + y3) * nu * (-x1 + x2) + (x1 - x3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (y1 - y2)); t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((y2 - y3) * nu * (x1 - x3) + (-x2 + x3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (-y1 + y3)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((-x2 + x3) * (x1 - x3) + (y2 - y3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (-y1 + y3)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((-y1 + y3) * nu * (x1 - x3) + (x1 - x3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (-y1 + y3)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((x1 - x3) ^ 2 + (-y1 + y3) ^ 2 * (0.1e1 / 0.2e1 - nu / 0.2e1)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((x1 - x3) * nu * (y1 - y2) + (-y1 + y3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (-x1 + x2)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((x1 - x3) * (-x1 + x2) + (-y1 + y3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (y1 - y2)); t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((y2 - y3) * (y1 - y2) + (-x2 + x3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (-x1 + x2)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((-x2 + x3) * nu * (y1 - y2) + (y2 - y3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (-x1 + x2)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((-y1 + y3) * (y1 - y2) + (x1 - x3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (-x1 + x2)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((x1 - x3) * nu * (y1 - y2) + (-y1 + y3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (-x1 + x2)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((y1 - y2) ^ 2 + (-x1 + x2) ^ 2 * (0.1e1 / 0.2e1 - nu / 0.2e1)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((y1 - y2) * nu * (-x1 + x2) + (-x1 + x2) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (y1 - y2)); t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((y2 - y3) * nu * (-x1 + x2) + (-x2 + x3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (y1 - y2)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((-x2 + x3) * (-x1 + x2) + (y2 - y3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (y1 - y2)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((-y1 + y3) * nu * (-x1 + x2) + (x1 - x3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (y1 - y2)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((x1 - x3) * (-x1 + x2) + (-y1 + y3) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (y1 - y2)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((y1 - y2) * nu * (-x1 + x2) + (-x1 + x2) * (0.1e1 / 0.2e1 - nu / 0.2e1) * (y1 - y2)) t * E / (-nu ^ 2 + 1) / (x1 * y2 - x1 * y3 - x2 * y1 + x2 * y3 + x3 * y1 - x3 * y2) * ((-x1 + x2) ^ 2 + (y1 - y2) ^ 2 * (0.1e1 / 0.2e1 - nu / 0.2e1));];

